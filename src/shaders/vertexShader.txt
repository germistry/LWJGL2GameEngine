#version 400 core   // Version of OpenGL to use

in vec3 position;   	// Input for vec3 3d vertex positions
in vec2 textureCoords; 	// Input for vec2 2d texture coordinates
in vec3 normal;			// Input for vec3 3d normal 

out vec2 pass_textureCoords;	//Output passed straight to fragment shader 
out vec3 surfaceNormal;			//The normal vector 
out vec3 toLightVector;			//The vector pointing to the light source
out vec3 toCameraVector;		//inverse of the view matrix for the camera 
out float visibility;			//Visibility float calculated by fog variables

uniform mat4 transformationMatrix; //Create variable for uniform matrix
uniform mat4 projectionMatrix;     //Create variable for projection matrix
uniform mat4 viewMatrix;			//Create variable for the view matrix (or camera)
uniform vec3 lightPosition;			//Create variable for the light position
uniform float useFakeLighting;		//Whether or not to use fake lighting. 1 is true & 0 is false

const float fogDensity = 0.0035;		//Fog constants for calculating exponential fog 
const float fogGradient = 5.0;

void main(void) {   // Main method that runs everytime vertex is processed by this vertex shader

	vec4 worldPosition = transformationMatrix * vec4(position,1.0); 		//calculating the world position so we don't have to calculate this twice
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;				//position of the vertex relative to camera
	gl_Position = projectionMatrix * positionRelativeToCamera;				//Tell OpenGL where to render this vertex on the screen
	pass_textureCoords = textureCoords;     								//Set to input textureCoords so that they get linearly interpolated all over the quad. 
	
	vec3 actualNormal = normal;												//Check whether to use fake lighting and if true set the normal to be facing directly up
	if(useFakeLighting > 0.5) {
		actualNormal = vec3(0.0,1.0,0.0);
	}
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;    //transformation matrix rotates model so normal has to be rotated as well so have to make it into a 4d vector then need to get the xyz components of the product
	toLightVector = lightPosition - worldPosition.xyz;     					//need to get the difference between the light position and the position of the light on the model (but will change if model is rotated) then get the xyz components
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;	//vector has to be converted to a 4x4 matrix then subtracted from the world position matrix

	float distance = length(positionRelativeToCamera.xyz);					//the distance calculation 
	visibility = exp(-pow((distance*fogDensity),fogGradient));					//the visibility calculation
	visibility = clamp(visibility,0.0,1.0);									//clamp function can be used to set min and max values 
	
}
