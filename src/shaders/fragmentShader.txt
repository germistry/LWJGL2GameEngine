#version 400 core 			// Version of OpenGL to use

in vec2 pass_textureCoords; // Inputs from the the vertex shader 
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility; 

out vec4 out_Color;			// Output is the colour of the pixel fragment shader is currently processing. 

uniform sampler2D textureSampler; 	//Represents texture to be used. 
uniform vec3 lightColour;			//Represents light colour to be used.
uniform float shineDampener;		//Represents the shine dampener value 
uniform float reflectivity;			//Represents the reflectivity value
uniform vec3 skyColour;				//Represents the sky colour 
	
void main(void) {			// Main method that runs for every pixel

	vec3 unitNormal = normalize(surfaceNormal);   					//Normalise the vectors so the size is equal to 1 as the direction is all that is relevant
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal,unitLightVector);   				//The dot product 
	float brightness = max(nDot1,0.1);								//If value is less than 0 ignore
	vec3 diffuse = brightness * lightColour;						//Multiply the brightness value to the lightcolour to get the final colour
	
	vec3 unitVectorToCamera = normalize(toCameraVector);			//Normalise the vector so the size is equal to 1
	vec3 lightDirection = -unitLightVector;							//opposite of the Light Vector 
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);				//GL has this reflection function to calculate the reflected light direction
	
	float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);			//Dot product of the two vectors without any dampening
	specularFactor = max(specularFactor,0.0);										//Cannot have a negative brightness
	float dampenedFactor = pow(specularFactor,shineDampener); 						//specularFactor raised to power of shineDampener - effects the low values more and high values less
	vec3 finalSpecular = max(dampenedFactor * lightColour * reflectivity,0.0);		//So that the final specular light is the colour of the light source - removed the *reflectivity as too bright
	
	vec4 textureColour = texture(textureSampler,pass_textureCoords);				//GL texture method, takes in texture sampler and texture coords for the point on the texture to sample
	if(textureColour.a<0.5) {														//test if alpha value is less than 0.5 then render transparency 		
		discard;
	}
	out_Color = vec4(diffuse,1.0) * textureColour + vec4(finalSpecular,1.0);		//output color to render for that point - texture colour multiplied by the diffuse then add the specular lighting colour   
	out_Color = mix(vec4(skyColour,1.0),out_Color, visibility);					//Final output color - after fog added. visibility = 0 would be completely in the sky colour, 1 would not be affected at all.   
}							